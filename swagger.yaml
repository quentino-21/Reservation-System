openapi: 3.0.4
info:
  title: Reservation System API
  description: Documentation of backend for Reservation System application.
  version: v1
paths:
  /api/register:
    post:
      tags:
        - Accounts
      description: "Creates a new user account with the provided registration details.\r\n- The account will be inactive by default until verified by an administrator.\r\n- If no role is provided, the 'Employee' role will be assigned automatically."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HttpValidationProblemDetails'
  /api/login:
    post:
      tags:
        - Accounts
      description: Authenticates a user and returns a JWT token and refresh token if the credentials are valid.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
  /api/refresh-token:
    post:
      tags:
        - Accounts
      description: Authenticates user by a refresh token and returns new JWT token and new refresh token if the credentials are valid.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
  /api/admin/products:
    post:
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '201':
          description: Created
  /api/admin/products/{id}:
    put:
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '204':
          description: No Content
    delete:
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '204':
          description: No Content
  /api/admin/reservations:
    get:
      tags:
        - Admin
      parameters:
        - name: PageSize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: PageNumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationDtoPaginatedResponseDto'
  /api/admin/reservations/{id}:
    get:
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationDto'
  /api/admin/reservations/{id}/confirm:
    post:
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/admin/reservations/{id}/reject:
    post:
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/admin/reservations/{id}/complete:
    post:
      tags:
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/clients/reservations:
    get:
      tags:
        - Clients
      parameters:
        - name: PageSize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: PageNumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationDtoPaginatedResponseDto'
    post:
      tags:
        - Clients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReservationDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '201':
          description: Created
  /api/clients/reservations/{id}:
    get:
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationDto'
  /api/clients/reservations/{id}/cancel:
    post:
      tags:
        - Clients
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
  /api/products:
    get:
      tags:
        - Products
      parameters:
        - name: PageSize
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: PageNumber
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDtoPaginatedResponseDto'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HttpValidationProblemDetails'
  /api/products/{id}:
    get:
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
  /api/users/me:
    get:
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HttpValidationProblemDetails'
  /api/users/me/change-password:
    patch:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HttpValidationProblemDetails'
components:
  schemas:
    ChangePasswordDto:
      required:
        - confirmPassword
        - currentPassword
        - newPassword
      type: object
      properties:
        currentPassword:
          type: string
          nullable: true
        newPassword:
          type: string
          nullable: true
        confirmPassword:
          type: string
          nullable: true
      additionalProperties: false
    CreateProductDto:
      required:
        - description
        - duration
        - name
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        duration:
          type: string
          format: date-span
        price:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    CreateReservationDto:
      required:
        - productId
        - startTime
      type: object
      properties:
        productId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
      additionalProperties: false
    HttpValidationProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          nullable: true
      additionalProperties: {}
    LoginDto:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    LoginResponseDto:
      required:
        - jwtToken
        - refreshToken
      type: object
      properties:
        jwtToken:
          type: string
          nullable: true
        refreshToken:
          type: string
          nullable: true
      additionalProperties: false
    ProductDto:
      required:
        - description
        - duration
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        duration:
          type: string
          format: date-span
        price:
          type: number
          format: double
          nullable: true
      additionalProperties: false
    ProductDtoPaginatedResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProductDto'
          nullable: true
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
      additionalProperties: false
    RefreshTokenRequestDto:
      required:
        - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
          nullable: true
      additionalProperties: false
    RegisterDto:
      required:
        - confirmPassword
        - email
        - name
        - password
        - surname
      type: object
      properties:
        name:
          type: string
          nullable: true
        surname:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        role:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        confirmPassword:
          type: string
          nullable: true
      additionalProperties: false
    ReservationDto:
      required:
        - id
        - productId
        - productName
        - startTime
        - userId
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        productName:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReservationStatus'
        startTime:
          type: string
          format: date-time
      additionalProperties: false
    ReservationDtoPaginatedResponseDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ReservationDto'
          nullable: true
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
      additionalProperties: false
    ReservationStatus:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      type: integer
      format: int32
    UpdateUserDto:
      required:
        - email
        - name
        - surname
      type: object
      properties:
        name:
          type: string
          nullable: true
        surname:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    UserDto:
      required:
        - email
        - id
        - name
        - surname
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        surname:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        role:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: |-
        JWT Authorization header using the Bearer scheme.
        Enter 'Bearer' [space] and then your token in the text input below.
        Example: 'Bearer 12345abcdef'
      name: Authorization
      in: header
security:
  - Bearer: []
